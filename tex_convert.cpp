#include <assert.h>
#include "mpanimbuild.h"
#include "exoquant.h"

static uint8_t color_5_to_8[32] = {
    0x00, 0x08, 0x10, 0x19, 0x21, 0x29, 0x31, 0x3a, 0x42, 0x4a, 0x52,
    0x5a, 0x63, 0x6b, 0x73, 0x7b, 0x84, 0x8c, 0x94, 0x9c, 0xa5, 0xad,
    0xb5, 0xbd, 0xc5, 0xce, 0xd6, 0xde, 0xe6, 0xef, 0xf7, 0xff
};

static uint8_t color_6_to_8[64] = {
    0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c, 0x20, 0x24, 0x28,
    0x2d, 0x31, 0x35, 0x39, 0x3d, 0x41, 0x45, 0x49, 0x4d, 0x51, 0x55,
    0x59, 0x5d, 0x61, 0x65, 0x69, 0x6d, 0x71, 0x75, 0x79, 0x7d, 0x82,
    0x86, 0x8a, 0x8e, 0x92, 0x96, 0x9a, 0x9e, 0xa2, 0xa6, 0xaa, 0xae,
    0xb2, 0xb6, 0xba, 0xbe, 0xc2, 0xc6, 0xca, 0xce, 0xd2, 0xd7, 0xdb,
    0xdf, 0xe3, 0xe7, 0xeb, 0xef, 0xf3, 0xf7, 0xfb, 0xff
};

static uint8_t color_8_to_3[256] = {
    0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x01, 0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x02, 0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02,
    0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02,
    0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02, 0x03,0x03,0x03,0x03,
    0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03,
    0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03,
    0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04,
    0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04,
    0x04,0x04,0x04,0x04, 0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05,
    0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05,
    0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x06,0x06,0x06, 0x06,0x06,0x06,0x06,
    0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06,
    0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06, 0x06,0x07,0x07,0x07,
    0x07,0x07,0x07,0x07, 0x07,0x07,0x07,0x07, 0x07,0x07,0x07,0x07, 0x07,0x07,0x07,0x07
};

static uint8_t color_8_to_4[256] = {
    0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01, 0x01,0x01,0x02,0x02, 0x02,0x02,0x02,0x02,
    0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x02, 0x02,0x02,0x02,0x03, 0x03,0x03,0x03,0x03,
    0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x04,0x04,0x04,0x04,
    0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04, 0x04,0x04,0x04,0x04, 0x04,0x05,0x05,0x05,
    0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x05,0x06,0x06,
    0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x06, 0x06,0x06,0x06,0x07,
    0x07,0x07,0x07,0x07, 0x07,0x07,0x07,0x07, 0x07,0x07,0x07,0x07, 0x07,0x07,0x07,0x07,
    0x08,0x08,0x08,0x08, 0x08,0x08,0x08,0x08, 0x08,0x08,0x08,0x08, 0x08,0x08,0x08,0x08,
    0x08,0x09,0x09,0x09, 0x09,0x09,0x09,0x09, 0x09,0x09,0x09,0x09, 0x09,0x09,0x09,0x09,
    0x09,0x09,0x0a,0x0a, 0x0a,0x0a,0x0a,0x0a, 0x0a,0x0a,0x0a,0x0a, 0x0a,0x0a,0x0a,0x0a,
    0x0a,0x0a,0x0a,0x0b, 0x0b,0x0b,0x0b,0x0b, 0x0b,0x0b,0x0b,0x0b, 0x0b,0x0b,0x0b,0x0b,
    0x0b,0x0b,0x0b,0x0b, 0x0c,0x0c,0x0c,0x0c, 0x0c,0x0c,0x0c,0x0c, 0x0c,0x0c,0x0c,0x0c,
    0x0c,0x0c,0x0c,0x0c, 0x0c,0x0d,0x0d,0x0d, 0x0d,0x0d,0x0d,0x0d, 0x0d,0x0d,0x0d,0x0d,
    0x0d,0x0d,0x0d,0x0d, 0x0d,0x0d,0x0e,0x0e, 0x0e,0x0e,0x0e,0x0e, 0x0e,0x0e,0x0e,0x0e,
    0x0e,0x0e,0x0e,0x0e, 0x0e,0x0e,0x0e,0x0f, 0x0f,0x0f,0x0f,0x0f, 0x0f,0x0f,0x0f,0x0f
};

static uint8_t color_8_to_5[256] = {
    0x00,0x00,0x00,0x00, 0x00,0x01,0x01,0x01, 0x01,0x01,0x01,0x01, 0x01,0x02,0x02,0x02,
    0x02,0x02,0x02,0x02, 0x02,0x03,0x03,0x03, 0x03,0x03,0x03,0x03, 0x03,0x04,0x04,0x04,
    0x04,0x04,0x04,0x04, 0x04,0x04,0x05,0x05, 0x05,0x05,0x05,0x05, 0x05,0x05,0x06,0x06,
    0x06,0x06,0x06,0x06, 0x06,0x06,0x07,0x07, 0x07,0x07,0x07,0x07, 0x07,0x07,0x08,0x08,
    0x08,0x08,0x08,0x08, 0x08,0x08,0x09,0x09, 0x09,0x09,0x09,0x09, 0x09,0x09,0x09,0x0a,
    0x0a,0x0a,0x0a,0x0a, 0x0a,0x0a,0x0a,0x0b, 0x0b,0x0b,0x0b,0x0b, 0x0b,0x0b,0x0b,0x0c,
    0x0c,0x0c,0x0c,0x0c, 0x0c,0x0c,0x0c,0x0d, 0x0d,0x0d,0x0d,0x0d, 0x0d,0x0d,0x0d,0x0d,
    0x0e,0x0e,0x0e,0x0e, 0x0e,0x0e,0x0e,0x0e, 0x0f,0x0f,0x0f,0x0f, 0x0f,0x0f,0x0f,0x0f,
    0x10,0x10,0x10,0x10, 0x10,0x10,0x10,0x10, 0x11,0x11,0x11,0x11, 0x11,0x11,0x11,0x11,
    0x12,0x12,0x12,0x12, 0x12,0x12,0x12,0x12, 0x12,0x13,0x13,0x13, 0x13,0x13,0x13,0x13,
    0x13,0x14,0x14,0x14, 0x14,0x14,0x14,0x14, 0x14,0x15,0x15,0x15, 0x15,0x15,0x15,0x15,
    0x15,0x16,0x16,0x16, 0x16,0x16,0x16,0x16, 0x16,0x16,0x17,0x17, 0x17,0x17,0x17,0x17,
    0x17,0x17,0x18,0x18, 0x18,0x18,0x18,0x18, 0x18,0x18,0x19,0x19, 0x19,0x19,0x19,0x19,
    0x19,0x19,0x1a,0x1a, 0x1a,0x1a,0x1a,0x1a, 0x1a,0x1a,0x1b,0x1b, 0x1b,0x1b,0x1b,0x1b,
    0x1b,0x1b,0x1b,0x1c, 0x1c,0x1c,0x1c,0x1c, 0x1c,0x1c,0x1c,0x1d, 0x1d,0x1d,0x1d,0x1d,
    0x1d,0x1d,0x1d,0x1e, 0x1e,0x1e,0x1e,0x1e, 0x1e,0x1e,0x1e,0x1f, 0x1f,0x1f,0x1f,0x1f
};

static uint8_t color_8_to_6[256] = {
    0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03,
    0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06,
    0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09,
    0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0b, 0x0b, 0x0b, 0x0b, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0d, 0x0d, 0x0d, 0x0d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0f,
    0x0f, 0x0f, 0x0f, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12,
    0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
    0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1b, 0x1b, 0x1b, 0x1b, 0x1c, 0x1c, 0x1c, 0x1c, 0x1d, 0x1d, 0x1d, 0x1d,
    0x1e, 0x1e, 0x1e, 0x1e, 0x1f, 0x1f, 0x1f, 0x1f, 0x20, 0x20, 0x20, 0x20,
    0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23,
    0x24, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26,
    0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29,
    0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2b, 0x2b, 0x2b, 0x2b, 0x2c, 0x2c, 0x2c,
    0x2c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2e, 0x2e, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f,
    0x2f, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32,
    0x32, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35,
    0x35, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38,
    0x38, 0x39, 0x39, 0x39, 0x39, 0x3a, 0x3a, 0x3a, 0x3a, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3c, 0x3c, 0x3c, 0x3c, 0x3d, 0x3d, 0x3d, 0x3d, 0x3e, 0x3e, 0x3e,
    0x3e, 0x3f, 0x3f, 0x3f
};

static void ConvertTextureRGBA8(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
	for (int32_t i = 0; i < h; i++) {
		for (int32_t j = 0; j < w; j++) {
			int32_t block_pitch = (w + 3) / 4;
			int32_t block_y_idx = i / 4;
			int32_t block_x_idx = j / 4;
			int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
			int32_t pixel_idx = ((i % 4) * 4) + (j % 4);
			uint32_t pixel_ofs = (block_idx * 64) + (pixel_idx * 2);
			dst[pixel_ofs] = src[(((i * w) + j) * 4) + 3];
			dst[pixel_ofs+1] = src[((i * w) + j) * 4];
			dst[pixel_ofs+32] = src[(((i * w) + j) * 4) + 1];
			dst[pixel_ofs+33] = src[(((i * w) + j) * 4) + 2];
		}
	}
}

static void WriteU16Mem(uint8_t *dst, uint16_t value)
{
    dst[0] = value >> 8;
    dst[1] = value & 0xFF;
}

static void ConvertColorRGB5A3(uint8_t *dst, uint8_t *color)
{
    uint16_t value;
    if (color_8_to_3[color[3]] == 7) {
        value = 0x8000 | (color_8_to_5[color[0]] << 10) | (color_8_to_5[color[1]] << 5) | color_8_to_5[color[2]];
    } else {
        value = (color_8_to_3[color[3]] << 12) | (color_8_to_4[color[0]] << 8) | (color_8_to_4[color[1]] << 4) | color_8_to_4[color[2]];
    }
    WriteU16Mem(dst, value);
}

static void ConvertTextureRGB5A3(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 3) / 4;
            int32_t block_y_idx = i / 4;
            int32_t block_x_idx = j / 4;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 4) * 4) + (j % 4);
            uint32_t pixel_ofs = (block_idx * 32) + (pixel_idx * 2);
            ConvertColorRGB5A3(&dst[pixel_ofs], &src[((i * w) + j) * 4]);
        }
    }
}

static uint8_t pal_data[2*256];

static void ConvertTextureCI8(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    uint8_t *pal_buf = new uint8_t[256 * 4]();
    uint8_t *data_buf =  new uint8_t[w * h]();
    exq_data *exq_data = exq_init();
    exq_feed(exq_data, src, w*h);
    exq_quantize_hq(exq_data, 256);
    exq_get_palette(exq_data, pal_buf, 256);
    exq_map_image_ordered(exq_data, w, h, src, data_buf);
    exq_free(exq_data);
    for (int32_t i = 0; i < 256; i++) {
        ConvertColorRGB5A3(&pal_data[i*2], &pal_buf[i*4]);
    }
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 4;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 4) * 8) + (j % 8);
            uint32_t pixel_ofs = (block_idx * 32) + pixel_idx;
            dst[pixel_ofs] = data_buf[((i * w) + j)];
        }
    }
    delete[] pal_buf;
    delete[] data_buf;
}

static void ConvertTextureCI4(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    uint8_t *pal_buf = new uint8_t[16 * 4]();
    uint8_t *data_buf = new uint8_t[w * h]();
    exq_data *exq_data = exq_init();
    exq_feed(exq_data, src, w * h);
    exq_quantize_hq(exq_data, 16);
    exq_get_palette(exq_data, pal_buf, 16);
    exq_map_image_ordered(exq_data, w, h, src, data_buf);
    exq_free(exq_data);
    for (int32_t i = 0; i < 16; i++) {
        ConvertColorRGB5A3(&pal_data[i * 2], &pal_buf[i * 4]);
    }
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 8;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 8) * 8) + (j % 8);
            uint32_t pixel_ofs = (block_idx * 32) + (pixel_idx / 2);
            if (j % 2) {
                dst[pixel_ofs] |= data_buf[((i * w) + j)];
            } else {
                dst[pixel_ofs] = data_buf[((i * w) + j)] << 4;
            }
        }
    }
    delete[] pal_buf;
    delete[] data_buf;
}

static void ConvertTextureIA8(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 3) / 4;
            int32_t block_y_idx = i / 4;
            int32_t block_x_idx = j / 4;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 4) * 4) + (j % 4);
            uint32_t pixel_ofs = (block_idx * 32) + (pixel_idx * 2);
            float r = src[((i * w) + j) * 4] * 0.3f;
            float g = src[(((i * w) + j) * 4) + 1] * 0.59f;
            float b = src[(((i * w) + j) * 4) + 2] * 0.11f;
            uint8_t a = src[(((i * w) + j) * 4) + 3];
            uint8_t intensity = (uint8_t)(r + g + b);
            dst[pixel_ofs] = a;
            dst[pixel_ofs + 1] = intensity;
        }
    }
}

static void ConvertTextureIA4(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 4;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 4) * 8) + (j % 8);
            uint32_t pixel_ofs = (block_idx * 32) + pixel_idx;
            float r = src[((i * w) + j) * 4] * 0.3f;
            float g = src[(((i * w) + j) * 4) + 1] * 0.59f;
            float b = src[(((i * w) + j) * 4) + 2] * 0.11f;
            uint8_t a = color_8_to_4[src[(((i * w) + j) * 4) + 3]];
            uint8_t intensity = color_8_to_4[(uint8_t)(r + g + b)];
            dst[pixel_ofs] = (a << 4)| intensity;
        }
    }
}

static void ConvertTextureI8(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 4;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 4) * 8) + (j % 8);
            uint32_t pixel_ofs = (block_idx * 32) + pixel_idx;
            float r = src[((i * w) + j) * 4] * 0.3f;
            float g = src[(((i * w) + j) * 4) + 1] * 0.59f;
            float b = src[(((i * w) + j) * 4) + 2] * 0.11f;
            uint8_t intensity = (((uint8_t)(r + g + b)) * src[(((i * w) + j) * 4) + 3]) / 255;
            dst[pixel_ofs] = intensity;
        }
    }
}

static void ConvertTextureI4(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{

    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 8;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 8) * 8) + (j % 8);
            uint32_t pixel_ofs = (block_idx * 32) + (pixel_idx / 2);
            float r = src[((i * w) + j) * 4] * 0.3f;
            float g = src[(((i * w) + j) * 4) + 1] * 0.59f;
            float b = src[(((i * w) + j) * 4) + 2] * 0.11f;
            uint8_t intensity = (((uint8_t)(r + g + b)) * src[(((i * w) + j) * 4) + 3]) / 255;
            intensity = color_8_to_4[intensity];
            if (j % 2) {
                dst[pixel_ofs] |= intensity;
            } else {
                dst[pixel_ofs] = intensity << 4;
            }
        }
    }
}

static void ConvertTextureA8(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    for (int32_t i = 0; i < h; i++) {
        for (int32_t j = 0; j < w; j++) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 4;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            int32_t pixel_idx = ((i % 4) * 8) + (j % 8);
            uint32_t pixel_ofs = (block_idx * 32) + pixel_idx;
            dst[pixel_ofs] = src[(((i * w) + j) * 4) + 3];
        }
    }
}

static int32_t Distance(uint8_t *color1, uint8_t *color2)
{
    int32_t temp, val;
    temp = 0;
    for (int32_t i = 0; i < 3; i++) {
        val = (int32_t)color1[i] - (int32_t)color2[i];
        temp += val * val;
    }
    return temp;
}

static int32_t LeastDistance(uint8_t *palette, uint8_t *color)
{
    int32_t dist, best, temp;

    if (color_8_to_5[color[3]] == 0) {
        return 3;
    }
    dist = INT32_MAX;
    best = 0;

    for (int32_t i = 0; i < 16; i++) {
        if (palette[(i * 4) + 3] != 255) {
            break;
        }
        temp = Distance(&palette[i*4], color);
        if (temp < dist) {
            if (temp == 0) {
                return i;
            }
            dist = temp;
            best = i;
        }
    }
    return best;
}

static void ConvertBlockCMPR(uint8_t *dst, uint8_t *block)
{
    int32_t col1, col2, dist, temp;
    bool alpha;
    uint8_t palette[16];

    dist = col1 = col2 = -1;
    alpha = false;

    for (int32_t i = 0; i < 15; i++) {
        if (block[i * 4 + 3] < 128) {
            alpha = true;
        } else {
            for (int32_t j = i + 1; j < 16; j++) {
                temp = Distance(&block[i * 4], &block[j * 4]);

                if (temp > dist) {
                    dist = temp;
                    col1 = i;
                    col2 = j;
                }
            }
        }
    }
    if (dist == -1) {
        palette[0] = 0;
        palette[1] = 0;
        palette[2] = 0;
        palette[3] = 255;
        palette[4] = 255;
        palette[5] = 255;
        palette[6] = 255;
        palette[7] = 255;
    } else {
        memcpy(&palette[0], &block[col1 * 4], 3);
        palette[3] = 255;
        memcpy(&palette[4], &block[col2 * 4], 3);
        palette[7] = 255;
        if (color_8_to_5[palette[0]] == color_8_to_5[palette[4]] && color_8_to_6[palette[1]] == color_8_to_6[palette[5]] && color_8_to_5[palette[2]] == color_8_to_5[palette[6]]) {
            if (color_8_to_5[palette[0]] == 0 && color_8_to_6[palette[1]] == 0 && color_8_to_5[palette[2]] >> 3 == 0) {
                palette[4] = palette[5] = palette[6] = 255;
            } else {
                palette[4] = palette[5] = palette[6] = 0;
            }
        } 
    }
    uint16_t color0, color1;
    color0 = (color_8_to_5[palette[0]] << 11) | (color_8_to_6[palette[1]] << 5) | color_8_to_5[palette[2]];
    color1 = (color_8_to_5[palette[4]] << 11) | (color_8_to_6[palette[5]] << 5) | color_8_to_5[palette[6]];
    WriteU16Mem(&dst[0], color0);
    WriteU16Mem(&dst[2], color1);
    if ((dst[0] > dst[2] || (dst[0] == dst[2] && dst[1] >= dst[3])) == alpha) {
        memcpy(&dst[4], &dst[0], 2);
        memcpy(&dst[0], &dst[2], 2);
        memcpy(&dst[2], &dst[4], 2);
        palette[8] = palette[0];
        palette[9] = palette[1];
        palette[10] = palette[2];
        palette[11] = palette[3];
        palette[0] = palette[4];
        palette[1] = palette[5];
        palette[2] = palette[6];
        palette[3] = palette[7];
        palette[4] = palette[8];
        palette[5] = palette[9];
        palette[6] = palette[10];
        palette[7] = palette[11];
    }
    if (!alpha) {
        palette[8] = ((palette[0] * 5) + (palette[4] * 3)) / 8;
        palette[9] = ((palette[1] * 5) + (palette[5] * 3)) / 8;
        palette[10] = ((palette[2] * 5) + (palette[6] * 3)) / 8;
        palette[11] = 255;
        palette[12] = ((palette[0] * 3) + (palette[4] * 5)) / 8;
        palette[13] = ((palette[1] * 3) + (palette[5] * 5)) / 8;
        palette[14] = ((palette[2] * 5) + (palette[6] * 5)) / 8;
        palette[15] = 255;
    } else {
        palette[12] = palette[8] = (palette[0] + palette[4]) / 2;
        palette[13] = palette[9] = (palette[0] + palette[4]) / 2;
        palette[14] = palette[10] = (palette[0] + palette[4]) / 2;
        palette[11] = 255;
        palette[15] = 0;
    }
    for (int i = 0; i < 4; i++)
    {
        dst[4 + i] = LeastDistance(palette, &block[i*16]) << 6 | LeastDistance(palette, &block[(i * 16)+4]) << 4 | LeastDistance(palette, &block[(i * 16) + 8]) << 2 | LeastDistance(palette, &block[(i * 16) + 12]);
    }
}

static void ConvertTextureCMPR(int32_t w, int32_t h, uint8_t *src, uint8_t *dst)
{
    for (int32_t i = 0; i < ((h + 7) / 8) * 8; i += 8) {
        for (int32_t j = 0; j < ((w + 7) / 8) * 8; j += 8) {
            int32_t block_pitch = (w + 7) / 8;
            int32_t block_y_idx = i / 8;
            int32_t block_x_idx = j / 8;
            int32_t block_idx = (block_pitch * block_y_idx) + block_x_idx;
            for (int32_t block_y = 0; block_y < 2; block_y++) {
                for (int32_t block_x = 0; block_x < 2; block_x++) {
                    uint8_t raw_block[64];
                    uint32_t block_ofs = (block_idx * 32) + (((block_y * 2) + block_x) * 8);
                    for (int32_t y = 0; y < 4; y++) {
                        for (int32_t x = 0; x < 4; x++) {
                            int32_t pixel_x = j + (block_x * 4) + x;
                            int32_t pixel_y = i + (block_y * 4) + y;
                            if (pixel_x >= w) {
                                pixel_x = w - 1;
                            }
                            if (pixel_y >= h) {
                                pixel_y = h - 1;
                            }
                            memcpy(&raw_block[((y * 4) + x) * 4], &src[((pixel_y * w) + pixel_x) * 4], 4);
                        }
                    }
                    ConvertBlockCMPR(&dst[block_ofs], raw_block);
                }
            }
        }
    }
}

void TextureWrite(FILE *file, uint8_t format, int32_t w, int32_t h, uint8_t *src)
{
	uint32_t data_size = GetTexDataSize(format, w, h);
	uint8_t *dst = new uint8_t[data_size];
	switch (format) {
		case TEX_FORMAT_RGBA8:
			ConvertTextureRGBA8(w, h, src, dst);
			break;

        case TEX_FORMAT_RGB5A3:
            ConvertTextureRGB5A3(w, h, src, dst);
            break;

        case TEX_FORMAT_CI8:
            ConvertTextureCI8(w, h, src, dst);
            fwrite(pal_data, 2, 256, file);
            break;

        case TEX_FORMAT_CI4:
            ConvertTextureCI4(w, h, src, dst);
            fwrite(pal_data, 2, 16, file);
            break;

        case TEX_FORMAT_IA8:
            ConvertTextureIA8(w, h, src, dst);
            break;

        case TEX_FORMAT_IA4:
            ConvertTextureIA4(w, h, src, dst);
            break;

        case TEX_FORMAT_I8:
            ConvertTextureI8(w, h, src, dst);
            break;

        case TEX_FORMAT_I4:
            ConvertTextureI4(w, h, src, dst);
            break;

        case TEX_FORMAT_A8:
            ConvertTextureA8(w, h, src, dst);
            break;

        case TEX_FORMAT_CMPR:
            ConvertTextureCMPR(w, h, src, dst);
            break;

		default:
			PrintError("Invalid Texture Format %d.\n", format);
			break;
	}
	fwrite(dst, 1, data_size, file);
	delete[] dst;
}